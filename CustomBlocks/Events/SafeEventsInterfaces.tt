// SafeEventsInterfaces.tt; SafeEventsInterfaces.cs
//
// The MIT License (MIT)
//
// Copyright (c) 2016-2018 DarkCaster <dark.caster@outlook.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#
	var asyncChunks	=	new []
	{
		new { async=false, await="",        async_sfx="",           ret="bool",       ret_void="void", ret_tresult="TResult",       action="Action",
		func_tresult="Func<TResult>",       func_t="Func<T>",       func_kvp="Func<KeyValuePair<object, T>>" },
		new { async=true,  await="await ",  async_sfx="Async",      ret="Task<bool>", ret_void="Task", ret_tresult="Task<TResult>", action="Func<Task>",
		func_tresult="Func<Task<TResult>>", func_t="Func<Task<T>>", func_kvp="Func<Task<KeyValuePair<object, T>>>" },
	};

	var ifaceDefs = new []
	{
		new { obsolete=true,  name="ISafeEventCtrl", idisposable=" : IDisposable", summary="Control interface for custom event classes. For use by publisher to raise events and gather usage statistics."},
		new { obsolete=false, name="ISafeEventCtrlLite", idisposable="", summary="Control interface for custom event classes (new version, dispose not needed anymore). For use by publisher to raise events and gather usage statistics."},
	};

	var raiseMethods = new int[] { 1, 2, 3 };
#>
//autogenerated, any changes should be made at SafeEventsInterfaces.tt

using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace DarkCaster.Events
{
	/// <summary>
	/// Generic interface for various custom events and messaging implementations. TODO: detailed description
	/// </summary>
	public interface ISafeEvent<T> where T : EventArgs
	{
		/// <summary>
		/// Subscribe for event. Method is thread safe.
		/// Trying to subscribe multicast delegate that contains entries already subscribed earlier or dublicate entries or null delegate
		/// will throw EventSubscriptionException, unless ignoreErrors is set to true.
		/// If publisher logic runs in its own thread there is no guarantee that subscribe will be performed not at the same time as event-raise calls,
		/// so your code should be robust enough.
		/// If you need that event raise is not performed at the same time with subscribe - wrap this call with "SafeExec".
		/// </summary>
		/// <param name="subscriber">Event callback - generic variant of EventHandler, where T is EventArgs</param>
		/// <param name="ignoreErrors">Do not throw errors while subscribing. Try to subscribe any elements from invocation list that is not already subscribed</param>
		void Subscribe(EventHandler<T> subscriber, bool ignoreErrors = false);

		/// <summary>
		/// Unsubscribe from event.
		/// Trying to unsubscribe multicast delegate that not contains entries already subscribed earlier or dublicate entries or null delegate
		/// will throw EventSubscriptionException, unless ignoreErrors is set to true.
		/// If publisher logic runs in its own thread there is no guarantee that unsubscribe will be performed not at the same time as event-raise calls,
		/// so your code should be robust enough.
		/// If you need that event raise is not performed at the same time or after unsubscribe - wrap this call with "SafeExec".
		/// </summary>
		/// <param name="subscriber">Event callback method used at subscribe - generic variant of EventHandler, where T is EventArgs</param>
		/// <param name="ignoreErrors">Do not throw errors while unsubscribing. Try to unsubscribe any elements from invocation list that have active subscription</param>
		void Unsubscribe(EventHandler<T> subscriber, bool ignoreErrors = false);
<# foreach(var asyncChunk in asyncChunks) { #>

		/// <summary>
		/// Wait for event raise process to complete and execute your code.
		/// This will only ensure that event raise process is NOT running in it's own thread at the same time when executing your code,
		/// SafeExec method may be run in parallel with other subscribers.
		/// Recursive execution is NOT allowed.
		/// All other methods from "ISafeEvent" can be also wrapped by "SafeExec".
		/// </summary>
		/// <param name="method">Your code goes here</param>
		/// <returns>Return value from your method</returns>
		<#=asyncChunk.ret_tresult#> SafeExec<#=asyncChunk.async_sfx#><TResult>(<#=asyncChunk.func_tresult#> method);

		/// <summary>
		/// Wait for event raise process to complete and execute your code.
		/// This will only ensure that event raise process is NOT running in it's own thread at the same time when executing your code,
		/// SafeExec method may be run in parallel with other subscribers.
		/// Recursive execution is NOT allowed.
		/// All other methods from "ISafeEvent" can be also wrapped by "SafeExec".
		/// </summary>
		/// <param name="method">Your code goes here</param>
		<#=asyncChunk.ret_void#> SafeExec<#=asyncChunk.async_sfx#>(<#=asyncChunk.action#> method);
<#}#>

		/// <summary>
		/// Property for use as drop-in replacement for standard events;
		/// </summary>
		[Obsolete("This is not a fully functionally identical drop-in replacement for standard events, so consider use Subscribe and Unsubscribe methods instead")]
		event EventHandler<T> Event;
	}
<# foreach(var ifaceDef in ifaceDefs) { #>

	/// <summary>
	/// <#=ifaceDef.summary#>
	/// </summary>
<#if(ifaceDef.obsolete){#>
	[ObsoleteAttribute("This interface is obsolete and keep for compatibility. Consider to use ISafeEventCtrlLite instead.", false)]
<#}#>
	public interface <#=ifaceDef.name#><T><#=ifaceDef.idisposable#> where T : EventArgs
	{
		/// <summary>
		/// Get current active subscriber's count.
		/// </summary>
		int SubCount { get; }
<# foreach(var asyncChunk in asyncChunks) { #>
<# foreach(var raiseMethod in raiseMethods) { #>
<#if(raiseMethod==1){#>

		/// <summary>
		/// Raises an event.
		/// </summary>
		/// <param name="sender">Event sender object</param>
		/// <param name="args">Event arguments</param>
		/// <param name="preExec">Your optional code that will be executed inside Raise method locks right before to start calling event callbacks.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// But you can also set your own locks inside this code to lock down external-thread access to your important stuff while event-raise is processing.
		/// Event callbacks are executed inside thread that started Raise method,
		/// so it is possible to access your locked stuff from event-callbacks without deadlocks if you are using proper locking mechanisms
		/// Unhandled exception that is thrown from your code will interrupt Raise method execution, unlock it's own locks, and forwarded further to caller.</param>
		/// <param name="postExec">Your optional code that will be executed right after event raise in it's context.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// You can disarm your own locks here, that was set in preExec.
		/// Unhandled exception that is thrown from your code will interrupt Raise method execution, unlock it's own locks, and forwarded further to caller.</param>
		/// <param name="exceptions">Optional storage to register exceptions happened during event raise</param>
		/// <returns>true - no exceptions was thrown while performing event raise.
		/// false - some subscriber's callbacks was failed, exceptions happened during raise may be collected to storage passed as "exceptions" param</returns>
		<#=asyncChunk.ret#> Raise<#=asyncChunk.async_sfx#>(object sender, T args, <#=asyncChunk.action#> preExec = null, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null);
<#} else if(raiseMethod==2) {#>

		/// <summary>
		/// Raises an event.
		/// </summary>
		/// <param name="sender">Event sender object</param>
		/// <param name="preExec">Your code that will be executed inside Raise method locks right before to start calling event callbacks.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// Your code must generate and provide event arguments on return.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// But you can also set your own locks inside this code to lock down external-thread access to your important stuff while event-raise is processing.
		/// Event callbacks are executed inside thread that started Raise method,
		/// so it is possible to access your locked stuff from event-callbacks without deadlocks if you are using proper locking mechanisms</param>
		/// <param name="postExec">Your optional code that will be executed right after event raise in it's context.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// You can disarm your own locks here, that was set in preExec.</param>
		/// <param name="exceptions">Optional storage to register exceptions happened during event raise</param>
		/// <returns>true - no exceptions was thrown while performing event raise.
		/// false - some subscriber's callbacks was failed, exceptions happened during raise may be collected to storage passed as "exceptions" param</returns>
		<#=asyncChunk.ret#> Raise<#=asyncChunk.async_sfx#>(object sender, <#=asyncChunk.func_t#> preExec, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null);
<#} else if(raiseMethod==3) {#>

		/// <summary>
		/// Raises an event.
		/// </summary>
		/// <param name="preExec">Your code that will be executed inside Raise method locks right before to start calling event callbacks.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// Your code must generate and provide link to sender object and event arguments on return.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// But you can also set your own locks inside this code to lock down external-thread access to your important stuff while event-raise is processing.
		/// Event callbacks are executed inside thread that started Raise method,
		/// so it is possible to access your locked stuff from event-callbacks without deadlocks if you are using proper locking mechanisms</param>
		/// <param name="postExec">Your optional code that will be executed right after event raise in it's context.
		/// May be used to create atomic and interlocked logic, that must be executed with event-raise.
		/// External threads from subscribers that using "SafeExec" wrapper from ISafeEvent will be locked while executing your custom code within event-raise.
		/// You can disarm your own locks here, that was set in preExec.</param>
		/// <param name="exceptions">Optional storage to register exceptions happened during event raise</param>
		/// <returns>true - no exceptions was thrown while performing event raise.
		/// false - some subscriber's callbacks was failed, exceptions happened during raise may be collected to storage passed as "exceptions" param</returns>
		<#=asyncChunk.ret#> Raise<#=asyncChunk.async_sfx#>(<#=asyncChunk.func_kvp#> preExec, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null);
<#}#>
<#}#>
<#}#>
	}
<#}#>
}