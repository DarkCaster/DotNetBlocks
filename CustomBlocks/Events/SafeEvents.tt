<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#
	var asyncChunks	=	new []
	{
		new { async=false, await="",       ret="bool",             action="Action",     func_t="Func<T>",       func_kvp="Func<KeyValuePair<object, T>>" },
		new { async=true,  await="await ", ret="async Task<bool>", action="Func<Task>", func_t="Func<Task<T>>", func_kvp="Func<Task<KeyValuePair<object, T>>>" },
	};
	
	var classDefs = new []
	{
		new { name="SafeEvent", summary="SafeEvent class, for release usage", dbg=false },
		new { name="SafeEventDbg", summary="SafeEventDbg class, SafeEvent with debug features", dbg=true },
	};

	var raiseMethods = new int[] { 1, 2, 3 };
#>

//autogenerated, any changes should be made at SafeEvents.tt

using System;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace DarkCaster.Events
{
<#
	foreach(var classDef in classDefs)
	{
#>
	/// <summary>
	/// <#=classDef.summary#>
	/// </summary>
	public sealed partial class <#=classDef.name#><T> : ISafeEventCtrl<T>, ISafeEvent<T>, IDisposable where T : EventArgs
	{
		private readonly object manageLock = new object();
		private readonly ReaderWriterLockSlim raiseRwLock = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);

		private const int INVLIST_MIN_RESIZE_LIMIT = 64;
		private int invListUsedLen = 0;
		private bool invListRebuildNeeded = false;

<#if(!classDef.dbg) {#>
		private EventHandler<T>[] invList = { null };
		private readonly HashSet<EventHandler<T>> dynamicSubscribers = new HashSet<EventHandler<T>>();
<#} else {#>
		private Forwarder[] invList = { null };
		private readonly Dictionary<SafeEventDbg.DelegateHandle, Forwarder> dynamicSubscribers = new Dictionary<SafeEventDbg.DelegateHandle, Forwarder>();
		private bool recursiveRaiseCheck = false;
		private Delegate curDelegate = null;
<#}#>

		//remove dublicates from target invocation list
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static int RemoveDublicates(Delegate[] target)
		{
			var curLen = target.Length;
			for (int sp = 0; sp < curLen; ++sp)
				for (int tp = sp + 1; tp < curLen; ++tp)
					while (tp < curLen && target[tp].Equals(target[sp]))
					{
						target[tp] = target[curLen - 1];
						target[curLen - 1] = null;
						--curLen;
					}
			return curLen;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private int UpdateInvListOnRise_Safe()
		{
			lock (manageLock)
			{
				if (!invListRebuildNeeded)
					return invListUsedLen;
				invListRebuildNeeded = false;
				//optionally recreate invocationList array if there is not enough space
				if (dynamicSubscribers.Count < (invListUsedLen / 3) && invList.Length >= INVLIST_MIN_RESIZE_LIMIT)
<#if(!classDef.dbg) {#>
					invList = new EventHandler<T>[invList.Length / 2];
<#} else {#>
					invList = new Forwarder[invList.Length / 2];
<#}#>
				else
				{
					var len = invList.Length;
					while (dynamicSubscribers.Count > len)
						len *= 2;
					if (len != invList.Length)
<#if(!classDef.dbg) {#>
						invList = new EventHandler<T>[len];
<#} else {#>
						invList = new Forwarder[len];
<#}#>
				}
				//copy values and set invListUsedLen;
<#if(!classDef.dbg) {#>
				dynamicSubscribers.CopyTo(invList, 0);
<#} else {#>
				dynamicSubscribers.Values.CopyTo(invList, 0);
<#}#>
				invListUsedLen = dynamicSubscribers.Count;
				for (int i = invListUsedLen; i < invList.Length; ++i)
					invList[i] = null;
				return invListUsedLen;
			}
		}

		public event EventHandler<T> Event
		{
			add { Subscribe(value, true); }
			remove { Unsubscribe(value, true); }
		}

		public int SubCount
		{
			get
			{
				lock (manageLock)
					return dynamicSubscribers.Count;
			}
		}

		public TResult SafeExec<TResult>(Func<TResult> method)
		{
			raiseRwLock.EnterReadLock();
			try { return method(); }
			finally { raiseRwLock.ExitReadLock(); }
		}

		public void SafeExec(Action method)
		{
			raiseRwLock.EnterReadLock();
			try { method(); }
			finally { raiseRwLock.ExitReadLock(); }
		}

		private bool isDisposed = false;

		public void Dispose()
		{
			if (!isDisposed)
			{
				isDisposed = true;
				//delay dispose in case when other publisher's thread is finishing it's work but still using ISafeEventCtrl methods.
				//such situation is already an error, so following 2 lines may be removed in future.
				raiseRwLock.EnterWriteLock();
				raiseRwLock.ExitWriteLock();
				raiseRwLock.Dispose();
			}
		}

		public void Subscribe(EventHandler<T> subscriber, bool ignoreErrors = false)
		{
			if (subscriber == null)
			{
				if (ignoreErrors)
					return;
				throw new EventSubscriptionException("Subscriber is null", null, null);
			}

			var subList = subscriber.GetInvocationList();
			var subLen = RemoveDublicates(subList);
			if (!ignoreErrors && subLen != subList.Length)
				throw new EventSubscriptionException("Subscriber's delegate list contains dublicates", subscriber, null);

			lock (manageLock)
			{
<#if(classDef.dbg) {#>
				if (ignoreErrors)
				{
					for (int i = 0; i < subLen; ++i)
					{
						var handle = new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target);
						if (dynamicSubscribers.ContainsKey(handle))
							continue;
						dynamicSubscribers.Add(handle, new Forwarder(subList[i]));
						invListRebuildNeeded = true;
					}
					return;
				}
				for (int i = 0; i < subLen; ++i)
				{
					var handle = new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target);
					if (dynamicSubscribers.ContainsKey(handle))
						throw new EventSubscriptionException("Subscriber's delegate list contains dublicates from active subscribers", subscriber, null);
				}
				for (int i = 0; i < subLen; ++i)
				{
					dynamicSubscribers.Add(new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target), new Forwarder(subList[i]));
					invListRebuildNeeded = true;
				}
<#} else {#>
				if (!ignoreErrors)
				{
					for (int i = 0; i < subLen; ++i)
						if (dynamicSubscribers.Contains((EventHandler<T>)subList[i]))
							throw new EventSubscriptionException("Subscriber's delegate list contains dublicates from active subscribers", subscriber, null);
					for (int i = 0; i < subLen; ++i)
						dynamicSubscribers.Add((EventHandler<T>)subList[i]);
					invListRebuildNeeded = true;
				}
				else
					for (int i = 0; i < subLen; ++i)
						invListRebuildNeeded |= dynamicSubscribers.Add((EventHandler<T>)subList[i]);
<#}#>
			}
		}

		public void Unsubscribe(EventHandler<T> subscriber, bool ignoreErrors = false)
		{
			if (subscriber == null)
			{
				if (ignoreErrors)
					return;
				throw new EventSubscriptionException("Subscriber is null", null, null);
			}
			var subList = subscriber.GetInvocationList();
			var subLen = RemoveDublicates(subList);
			if (!ignoreErrors && subLen != subList.Length)
				throw new EventSubscriptionException("Subscriber's delegate list contains dublicates", subscriber, null);
			lock (manageLock)
			{
				if (dynamicSubscribers.Count == 0)
				{
					if (ignoreErrors)
						return;
					throw new EventSubscriptionException("Current subscribers list is already empty", null, null);
				}
<#if(classDef.dbg) {#>
				if (ignoreErrors)
				{
					for (int i = 0; i < subLen; ++i)
						invListRebuildNeeded |= dynamicSubscribers.Remove(new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target));
					return;
				}
				for (int i = 0; i < subLen; ++i)
				{
					var handle = new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target);
					if (!dynamicSubscribers.ContainsKey(handle))
						throw new EventSubscriptionException("Current subscribers list do not contain some subscribers requested for remove", null, null);
				}
				for (int i = 0; i < subLen; ++i)
					dynamicSubscribers.Remove(new SafeEventDbg.DelegateHandle(subList[i].Method, subList[i].Target));
				invListRebuildNeeded = true;
<#} else {#>
				if (!ignoreErrors)
				{
					for (int i = 0; i < subLen; ++i)
						if (!dynamicSubscribers.Contains((EventHandler<T>)subList[i]))
							throw new EventSubscriptionException("Current subscribers list do not contain some subscribers requested for remove", null, null);
					for (int i = 0; i < subLen; ++i)
						dynamicSubscribers.Remove((EventHandler<T>)subList[i]);
					invListRebuildNeeded = true;
				}
				else
					for (int i = 0; i < subLen; ++i)
						invListRebuildNeeded |= dynamicSubscribers.Remove((EventHandler<T>)subList[i]);
<#}#>
			}
		}

<# foreach(var asyncChunk in asyncChunks) { #>
<# foreach(var raiseMethod in raiseMethods) { #>
<#if(raiseMethod==1){#>
		public <#=asyncChunk.ret#> Raise(object sender, T args, <#=asyncChunk.action#> preExec = null, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null)
<#} else if(raiseMethod==2) {#>
		public <#=asyncChunk.ret#> Raise(object sender, <#=asyncChunk.func_t#> preExec, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null)
<#} else if(raiseMethod==3) {#>
		public <#=asyncChunk.ret#> Raise(<#=asyncChunk.func_kvp#> preExec, <#=asyncChunk.action#> postExec = null, ICollection<EventRaiseException> exceptions = null)
<#}#>
		{
			raiseRwLock.EnterWriteLock();
			try
			{
<#if(classDef.dbg) {#>
				if (recursiveRaiseCheck)
				{
					recursiveRaiseCheck = false;
					throw new EventDbgException(
						string.Format("Recursion detected while processing event callback on object of type {0}", curDelegate.Method.DeclaringType.FullName),
						curDelegate.Method.DeclaringType,
						curDelegate
					);
				}
				recursiveRaiseCheck = true;
<#}#>
<#if(raiseMethod==1){#>
				if (preExec != null)
					<#=asyncChunk.await#>preExec();
<#} else if(raiseMethod==2) {#>
				var args = <#=asyncChunk.await#>preExec();
<#} else if(raiseMethod==3) {#>
				var pair = <#=asyncChunk.await#>preExec();
<#}#>
				if (exceptions != null && exceptions.IsReadOnly)
					exceptions = null;
				var len = UpdateInvListOnRise_Safe();
				var result = true;
				for (int i = 0; i < len; ++i)
				{
<#if(classDef.dbg) {#>
					curDelegate = Delegate.CreateDelegate(typeof(EventHandler<T>), invList[i].weakTarget.Target, invList[i].method, false);
<#if(raiseMethod==1||raiseMethod==2){#>
					try { invList[i].fwdDelegate(sender, args); }
<#} else if(raiseMethod==3) {#>
					try { invList[i].fwdDelegate(pair.Key, pair.Value); }
<#}#>
					catch (EventDbgException ex)
					{
						throw ex;
					}
<#} else {#>
<#if(raiseMethod==1||raiseMethod==2){#>
					try { invList[i](sender, args); }
<#} else if(raiseMethod==3) {#>
					try { invList[i](pair.Key, pair.Value); }
<#}#>
<#}#>
					catch (Exception ex)
					{
						if (exceptions != null)
<#if(classDef.dbg) {#>
							exceptions.Add(new EventRaiseException(string.Format("Subscriber's exception: {0}", ex.Message), curDelegate, ex));
<#} else {#>
							exceptions.Add(new EventRaiseException(string.Format("Subscriber's exception: {0}", ex.Message), invList[i], ex));
<#}#>
						result = false;
					}
				}
				if (postExec != null)
					<#=asyncChunk.await#>postExec();
				return result;
			}
			finally
			{
<#if(classDef.dbg) {#>
				curDelegate = null;
				recursiveRaiseCheck = false;
<#}#>
				raiseRwLock.ExitWriteLock();
			}
		}

<# } #>
<# } #>
	}
<#
	}
#>
}